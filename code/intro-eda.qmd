---
title: "Introduction + EDA"
author: "Aditya Iyer"
date: "2024-12-08"
format: pdf
editor: source
---

# Loading in packages
```{r, warning = F}
library(here)
library(tidyverse)
library(ggrepel)
library(nflreadr)
library(nflfastR)
library(nflplotR)
library(tidymodels)
library(visdat)
tidymodels_prefer()

options(scipen = 9999)
options(nflreadr.verbose = FALSE)
```


# Loadin in Data

Working with data from 2012 - 2020, more data is present but would cause extremely slow models.
```{r}
pbp <- nflfastR::load_pbp(2012:2022)
```

# Making Wins as a Stat

Need to make wins as a stat for game basis and sum for season total wins

```{r}
stats <- pbp |> 
  filter(
    !play_deleted,
    !is.na(play_type) & play_type != "qb_kneel" & play_type != "spike"
  ) |> # Filter out irrelevant plays
  group_by(game_id, posteam)  |> 
  summarise(
    # Starting Features
    total_epa = sum(epa, na.rm = TRUE),
    avg_epa = mean(epa, na.rm = TRUE),
    total_wpa = sum(wpa, na.rm = TRUE),
    avg_wpa = mean(wpa, na.rm = TRUE),
    pass_touchdowns = sum(pass_touchdown, na.rm = TRUE),
    rush_touchdowns = sum(rush_touchdown, na.rm = TRUE),
    rushing_attempts = sum(rush_attempt, na.rm = TRUE),
    pass_dropbacks = sum(pass_attempt, na.rm = TRUE),
    success_rate = mean(success, na.rm = TRUE),
    
    # Adjusted Penalty Yard Calculation
    penalties_committed = sum(!is.na(penalty_yards[penalty_team == posteam]), na.rm = TRUE),
    penalty_yards_committed = sum(penalty_yards[penalty_team == posteam], na.rm = TRUE),
    
    # Points Scored and Allowed
    points_scored = ifelse(unique(posteam) == unique(home_team), max(home_score, na.rm = TRUE), max(away_score, na.rm = TRUE)),
    points_allowed = ifelse(unique(posteam) == unique(home_team), max(away_score, na.rm = TRUE), max(home_score, na.rm = TRUE)),

    # Yardage and Play Features
    passing_yards = sum(passing_yards, na.rm = TRUE),
    rushing_yards = sum(rushing_yards, na.rm = TRUE),
    yards_gained = sum(yards_gained, na.rm = TRUE),
    yards_after_catch = sum(yards_after_catch, na.rm = TRUE),

    # EPA Features
    total_air_epa = sum(air_epa, na.rm = TRUE),
    avg_air_epa = mean(air_epa, na.rm = TRUE),
    total_yac_epa = sum(yac_epa, na.rm = TRUE),
    avg_yac_epa = mean(yac_epa, na.rm = TRUE),
    total_ep = sum(ep, na.rm = TRUE),
    avg_ep = mean(ep, na.rm = TRUE),

    # Adjusted Return Stats
    return_touchdowns = sum(
      case_when(
        play_type == "kickoff" & return_team == posteam ~ return_touchdown,
        TRUE ~ 0
      ),
      na.rm = TRUE
    ),
    return_yards = sum(
      case_when(
        play_type == "kickoff" & return_team == posteam ~ return_yards,
        TRUE ~ 0
      ),
      na.rm = TRUE
    ),
    
    # Sacks Taken
    sacks_taken = sum(sack, na.rm = TRUE),
    
    # Completion-Based EPA
    comp_air_epa_sum = sum(air_epa[complete_pass == 1], na.rm = TRUE), # Sum of air EPA on completions
    comp_air_epa_avg = mean(air_epa[complete_pass == 1], na.rm = TRUE), # Average of air EPA on completions
    comp_yac_epa_sum = sum(yac_epa[complete_pass == 1], na.rm = TRUE), # Sum of YAC EPA on completions
    comp_yac_epa_avg = mean(yac_epa[complete_pass == 1], na.rm = TRUE), # Average of YAC EPA on completions
    
    # Completion Probability Metrics
    avg_cp = mean(cp, na.rm = TRUE), # Average completion probability
    avg_cpoe = mean(cpoe, na.rm = TRUE), # Average completion percentage over expected
    
    .groups = "drop"
  ) |> 
  mutate(
    win = case_when(
      points_scored > points_allowed ~ 1,
      points_scored < points_allowed ~ 0,
      points_scored == points_allowed ~ NA_real_
    )
  ) |> 
  filter(!is.na(posteam), !is.na(win)) # Remove NA values for posteams and ties
```

```{r}
# Defense-related (opponent stats, punt returns, and penalties committed against posteam)
defteam_stats <- pbp |> 
  filter(
    !play_deleted,
    !is.na(play_type) & play_type != "qb_kneel" & play_type != "spike"
  ) |> 
  group_by(game_id, defteam) |> 
  summarise(
    penalties_committed_by_opponent = sum(!is.na(penalty_yards[penalty_team == defteam]), na.rm = TRUE),
    penalty_yards_committed_by_opponent = sum(penalty_yards[penalty_team == defteam], na.rm = TRUE),
    punt_return_touchdowns = sum(
      case_when(
        play_type == "punt" & return_team == defteam ~ return_touchdown,
        TRUE ~ 0
      ),
      na.rm = TRUE
    ),
    punt_return_yards = sum(
      case_when(
        play_type == "punt" & return_team == defteam ~ return_yards,
        TRUE ~ 0
      ),
      na.rm = TRUE
    ),
    .groups = "drop"
  ) |> 
  rename(posteam = defteam) |>  # Rename for consistency when merging with posteam stats
  filter(!is.na(posteam))
```

```{r}
# Merge posteam and defteam stats
final_stats <- stats |> 
  left_join(defteam_stats, by = c("game_id", "posteam")) |> 
  mutate(
    net_penalty_yards = penalty_yards_committed_by_opponent - penalty_yards_committed,
    win = case_when(
      points_scored > points_allowed ~ 1,
      points_scored < points_allowed ~ 0,
      points_scored == points_allowed ~ NA_real_
    )
  ) |> 
  filter(!is.na(posteam), !is.na(win)) # Remove NA values for posteams and ties
```


# EDA


```{r}
ggplot(stats, aes(x = as.factor(win), y = pass_touchdowns)) +
  geom_boxplot(fill = "lightblue", alpha = 0.7) +
  labs(x = "Win (1) or Loss (0)", y = "Pass Touchdowns") +
  theme_minimal()
```
```{r}

ggplot(stats, aes(x = win, y = avg_epa)) +
  geom_boxplot(aes(fill = factor(win)), alpha = 0.5) + # Scatter plot with color differentiation for wins
  labs(
    x = "Win (1) or Loss (0)", 
    y = "Net Penalty Yards",
    title = "Average EPA vs Win/Loss"
  ) +
  theme_minimal()
```

### Analyzing Predictors

```{r}
str(final_stats)
```


total vs avg epa:
```{r}
final_stats$posteam |> unique() |> length() # 32 teams, just a sanity check

final_stats |> 
  ggplot(aes(
    x = total_epa
  )) +
  geom_density()

final_stats |> 
  ggplot(aes(
    x = avg_epa
  )) +
  geom_density()

cor(final_stats$total_epa, final_stats$avg_epa, use = "complete.obs")
```


total vs avg wpa:
```{r}
final_stats |> 
  ggplot(aes(
    x = total_wpa
  )) +
  geom_density()

final_stats |> 
  ggplot(aes(
    x = avg_wpa
  )) +
  geom_density()

cor(final_stats$total_wpa, final_stats$avg_wpa, use = "complete.obs")
```

total vs avg air_epa:
```{r}
final_stats |> 
  ggplot(aes(
    x = total_air_epa
  )) +
  geom_density()

final_stats |> 
  ggplot(aes(
    x = avg_air_epa
  )) +
  geom_density()

cor(final_stats$total_air_epa, final_stats$avg_air_epa, use = "complete.obs")
```

total vs avg yac_epa:
```{r}
final_stats |> 
  ggplot(aes(
    x = total_yac_epa
  )) +
  geom_density()

final_stats |> 
  ggplot(aes(
    x = avg_yac_epa
  )) +
  geom_density()

cor(final_stats$total_yac_epa, final_stats$avg_yac_epa, use = "complete.obs")
```

total vs avg ep:
```{r}
final_stats |> 
  ggplot(aes(
    x = total_ep
  )) +
  geom_density()

final_stats |> 
  ggplot(aes(
    x = avg_ep
  )) +
  geom_density()

cor(final_stats$total_ep, final_stats$avg_ep, use = "complete.obs")
```

total vs avg comp_air_epa:
```{r}
final_stats |> 
  ggplot(aes(
    x = comp_air_epa_sum
  )) +
  geom_density()

final_stats |> 
  ggplot(aes(
    x = comp_air_epa_avg
  )) +
  geom_density()

cor(final_stats$comp_air_epa_sum, final_stats$comp_air_epa_avg, use = "complete.obs")
```
Clearly, the average and total epa stats are extremely correlated (as they're effectively communicating the same information)

Columns to remove:

total_epa
total_wpa
total_air_epa
total_yac_epa
total_ep
comp_air_epa_sum
comp_yac_epa_sum




```{r}
cor_plot <- final_stats |> 
  select(-game_id, posteam) |> 
  correlate()

cor_plot_filtered <- cor_plot |> 
  stretch() |> 
  filter(abs(r) > 0.7)

ggplot(cor_plot_filtered, aes(x, y, fill = r)) +
  geom_tile() +
  geom_text(aes(label = sprintf("%.2f", r)), color = "white") +  # Show numeric values on the tiles
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
```
I went through these one by one, each correlated stat has a different interpretation so it's important to keep them for now to really understand the model.

# Missing Data
```{r}
vis_miss(final_stats)
```
No missing data!

# EDA Finished

Write final_stats into CSV for modeling:

```{r}
final_stats <- final_stats |> 
  select(-total_epa, -total_wpa, -total_air_epa, -total_yac_epa, -total_ep, -comp_air_epa_sum, -comp_yac_epa_sum)


final_stats <- final_stats |> 
  mutate(
    win = as.factor(win),
    return_touchdowns = return_touchdowns + punt_return_touchdowns,
    return_yards = return_yards + punt_return_yards
  ) |> 
  select(-punt_return_touchdowns, -punt_return_yards, -net_penalty_yards, -penalties_committed, -points_scored, -penalties_committed_by_opponent, -yards_gained, -success_rate)
```

```{r}
cor_plot <- final_stats |> 
  select(-game_id, posteam) |> 
  correlate()

cor_plot_filtered <- cor_plot |> 
  stretch() |> 
  filter(abs(r) > 0.7)

ggplot(cor_plot_filtered, aes(x, y, fill = r)) +
  geom_tile() +
  geom_text(aes(label = sprintf("%.2f", r)), color = "white") +  # Show numeric values on the tiles
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
```


```{r}
library(here)
write_csv(final_stats, "../data/stats.csv")
```




